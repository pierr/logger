// Generated by CoffeeScript 1.6.2
(function() {
  var Levels, Logger, Message;

  if (typeof module === 'undefined' && typeof window !== 'undefined') {
    Levels = window.Levels;
    Message = window.Message;
  } else {
    Levels = require('./levels');
    Message = require('./message');
  }

  Logger = (function() {
    function Logger(name, level, options) {
      this.name = name != null ? name : "noName";
      this.level = level != null ? level : "info";
      this.options = options != null ? options : {};
      this.outputs = this.options.outputs || ['console'];
      this.is = {};
      this.messages = [];
      this.levels = new Levels();
      this.parseOutputs();
      this.log('info', "The logger has started.");
    }

    Logger.prototype.log = function(level, message) {
      if ((this.levels[level] != null) && this.levels[level].value >= this.levels[this.level].value) {
        if (this.messages.length > (this.options.max || 9)) {
          this.save();
        }
        message = new Message(level, message);
        if (this.is.console) {
          console[level](message.toString());
        }
        return this.messages.push(message);
      }
    };

    Logger.prototype.trace = function(message) {
      return this.log('trace', message);
    };

    Logger.prototype.warn = function(message) {
      return this.log('warn', message);
    };

    Logger.prototype.info = function(message) {
      return this.log('info', message);
    };

    Logger.prototype.debug = function(message) {
      return this.log('debug', message);
    };

    Logger.prototype.error = function(message) {
      return this.log('error', message);
    };

    Logger.prototype.parseOutputs = function() {
      var out, _i, _len, _ref, _results;

      this.is = this.is || {};
      _ref = this.outputs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        out = _ref[_i];
        switch (out) {
          case 'console':
            _results.push(this.is.console = true);
            break;
          case 'localStorage':
            _results.push(this.is.localStorage = (typeof window !== "undefined" && window !== null) && (window.localStorage != null));
            break;
          case 'file':
            _results.push(this.is.file = true);
            break;
          case 'server':
            _results.push(this.is.server = true);
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Logger.prototype.clear = function() {
      return this.messages.length = 0;
    };

    Logger.prototype.display = function() {
      var message, _i, _len, _ref, _results;

      _ref = this.messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        message = _ref[_i];
        _results.push(message.toString());
      }
      return _results;
    };

    Logger.prototype.save = function() {
      if (this.is.localStorage) {
        localStorage.setItem(this.name, JSON.stringify(this.messages));
      }
      return this.clear();
    };

    return Logger;

  })();

  if (typeof module === 'undefined' && typeof window !== 'undefined') {
    window.Logger = Logger;
  } else {
    module.exports = Logger;
  }

}).call(this);
